#!/usr/bin/env python
"""
Mood report application file.
"""
import pandas as pd

from lib.config import AppConf


conf = AppConf()


def print_aggregate_stats(df, column_name):
    """
    Print aggregate stats for a given DataFrame and column name.

    @param df: pandas.Dataframe instance.
    @param column_name: str
        Name of column to use in df. Also used to print a heading.

    @return: None
    """
    print(column_name)

    values = df[column_name]
    stats = {
        'mean': values.mean(),
        'median': values.median(),
    }

    for k, v in stats.items():
        print("{k}: {v:3.2f}".format(k=k, v=v))


def get_mood_counts(df):
    """
    Combine configured mood score with actual counts and return.

    @param df: pandas.DataFrame instance
        Data read in from cleaned CSV.

    @return: pandas.DataFrame instance
        Dataframe with index as 'mood_label' and columns as
        ['mood_score', 'count'].
    """
    config_df = pd.DataFrame.from_dict(
        conf.MOODS,
        orient='index',
        columns=['mood_score']
    )
    config_df.sort_values('mood_score', inplace=True)

    value_counts = pd.DataFrame(df['mood_label'].value_counts())
    value_counts.columns = ['count']

    return pd.merge(
        config_df,
        value_counts,
        left_index=True,
        right_index=True
    )


def make_report(csv_in_path):
    """
    Make report from input CSV and show.

    @param: csv_in_path: Path to cleaned CSV, generated by clean_csv.py script.

    @return: None
    """
    df = pd.read_csv(csv_in_path, usecols=['mood_label', 'mood_score'])

    print_aggregate_stats(df, 'mood_score')
    print(get_mood_counts(df))


def main():
    """
    Main command-line function.
    """
    csv_in_path = conf.get('data', 'cleaned_csv')

    make_report(csv_in_path)


if __name__ == '__main__':
    main()
